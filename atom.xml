<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>“只要活着，一定会遇上好事的” --《樱桃小丸子》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wekerSnail.github.io/"/>
  <updated>2019-04-10T09:23:38.035Z</updated>
  <id>https://wekerSnail.github.io/</id>
  
  <author>
    <name>Weker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vscode的markdown编辑</title>
    <link href="https://wekerSnail.github.io/2019/04/10/vscode-markdown/"/>
    <id>https://wekerSnail.github.io/2019/04/10/vscode-markdown/</id>
    <published>2019-04-10T09:22:18.000Z</published>
    <updated>2019-04-10T09:23:38.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode的markdown编辑"><a href="#vscode的markdown编辑" class="headerlink" title="vscode的markdown编辑"></a>vscode的markdown编辑</h1><ul><li><a href="#vscode%E7%9A%84markdown%E7%BC%96%E8%BE%91">vscode的markdown编辑</a></li><li><a href="#%E7%BC%96%E8%BE%91">编辑</a></li><li><a href="#%E6%8F%92%E4%BB%B6">插件</a></li></ul><p>vscode可以说是一个开箱即用的markdown编辑工具，原生就支持markdown，并且具有非常实用的markdown编辑功能，同时还可以通过安装其他的插件来扩展他的markdown编辑的功能。下面就来看看vscode的markdown编辑的简单使用。</p><h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><p><code>ctrl+n</code>是<code>vscode</code>基本的创建文件的快捷方式，我们可以通过该方式快速的创建<code>md</code>格式的文本文件来编写markdown文档。</p><p>同时<code>vscode</code>还原生支持非常多的markdown编辑功能，包括预览语法的高亮，文档的预览等，通过<code>vscode</code>的命令面板可以快速的调用这些编辑功能（快捷键ctrl+shift+p）。</p><p><img src="http://wx2.sinaimg.cn/mw690/99acde33ly1g1xnd85804j20iq0b3t91.jpg" alt="命令功能"></p><p>包括预览、侧边预览、锁定文档等功能。</p><p>预览文档还可以直接通过<code>Ctrl + K V</code>快捷键来打开，或者通过点击右上角的快捷图标<br><img src="http://wx4.sinaimg.cn/mw690/99acde33ly1g1xndf7vjdj207e04ujr7.jpg" alt="预览图标"><br>可以看到实时的编辑效果。</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>除了原生的markdown功能支持外，<code>vscode</code>还可以安装各种插件来实现更多的功能。</p><p>这边介绍其中一款使用比较多的插件 <code>Markdown All in one</code><br><img src="http://wx2.sinaimg.cn/mw690/99acde33ly1g1xndc9ye7j20ll0ep0tg.jpg" alt="markdown all in one"></p><p>通过这款插件</p><ul><li>可以使用一键生成文档目录 <em>（命令面板：markdown：create table of contents）</em></li><li>格式化文档 <em>（命令面板：format document）</em></li><li>快捷生成<em>斜体</em> <strong>粗体</strong> 等等语法效果，可以参考插件介绍</li><li>图片地址的补全</li><li>。。。</li></ul><p>功能比较多，就不一一介绍了。</p><p>除此之外，vscode还有很多其他的markdown插件，可以更具自己的需要去安装使用，这边只是抛砖引玉，粗略的介绍一下vscode的markdown支持。</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/60283517" target="_blank" rel="noopener">本文参考自少数派</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      简单介绍vscode的markdown编辑功能
    
    </summary>
    
      <category term="vscode" scheme="https://wekerSnail.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="https://wekerSnail.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>redux基础使用</title>
    <link href="https://wekerSnail.github.io/2019/01/16/redux/"/>
    <id>https://wekerSnail.github.io/2019/01/16/redux/</id>
    <published>2019-01-16T03:53:05.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</p><p>可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。不仅于此，它还提供 超爽的开发体验，比如有一个时间旅行调试器可以编辑后实时预览。</p><p>Redux 除了和 React 一起用外，还支持其它界面库。 </p><p>redux的三大原则：</p><ul><li>单一数据源</li><li>state的只读性</li><li>纯函数执行修改</li></ul><p>经常写vue的话，一定会了解到vuex这个数据管理工具，而redux也是和vuex类似的，也是一个数据管理工具，不同的是，它不依赖ui框架，除了react外，还支持其他的ui库。</p><p>下面就以一个加减计算及求和的应用介绍一下redux的简单使用</p><h1 id="action"><a href="#action" class="headerlink" title="action"></a>action</h1><blockquote><p><code>Action</code> 是把数据从应用（这里之所以不叫 view 是因为这些数据有可能是服务器响应，用户输入或其它非 view 的数据 ）传到 store 的有效载荷。它是 <code>store</code> 数据的唯一来源。一般来说你会通过 <code>store.dispatch()</code> 将 <code>action</code> 传到<code>store</code>。</p></blockquote><p>一般在定义action时，都会先定义一个actionType来方便对action的管理</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token comment" spellcheck="true">//actionType.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> INCREMENT <span class="token operator">=</span> <span class="token string">'increment'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> DECREMENT <span class="token operator">=</span> <span class="token string">'decrement'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Redux 中每个 action 构造函数都返回一个 action 对象</p><blockquote><p>我们约定，<code>action</code> 内必须使用一个字符串类型的 <code>type</code> 字段来表示将要执行的动作。多数情况下，<code>type</code> 会被定义成字符串常量。当应用规模越来越大时，建议使用单独的模块或文件来存放 <code>action</code>(如上)。</p></blockquote><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token comment" spellcheck="true">//action.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ActionTypes <span class="token keyword">from</span> <span class="token string">'./ActionTypes.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> ActionTypes<span class="token punctuation">.</span>INCREMENT<span class="token punctuation">,</span>    counter<span class="token punctuation">:</span> counter  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> ActionTypes<span class="token punctuation">.</span>DECREMENT<span class="token punctuation">,</span>    counter<span class="token punctuation">:</span> counter  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h1><blockquote><p><code>Reducers</code> 指定了应用状态的变化如何响应 <code>actions</code> 并发送到 <code>store</code> 的，记住 <code>actions</code> 只是描述了有事情发生了这一事实，并没有描述应用如何更新 <code>state</code>。</p></blockquote><blockquote><p><code>reducer</code> 就是一个纯函数，接收旧的 <code>state</code> 和 <code>action</code>，返回新的 <code>state</code>。<code>reducers</code>中并不会直接修改<code>state</code>中的数据，而只会返回新的数据，对于不修改的数据则原封不动的移入</p></blockquote><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token comment" spellcheck="true">//reducers.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ActionTypes <span class="token keyword">from</span> <span class="token string">'. /ActionTypes.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span>counter<span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//action中定义的对象</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ActionTypes<span class="token punctuation">.</span>INCREMENT <span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//根据action中的type来决定如何更新数据</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>state<span class="token punctuation">,</span> <span class="token punctuation">[</span>counter<span class="token punctuation">]</span><span class="token punctuation">:</span>state<span class="token punctuation">[</span>counter<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> ActionTypes<span class="token punctuation">.</span>DECREMENT <span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token operator">...</span>state <span class="token punctuation">,</span> <span class="token punctuation">[</span>counter<span class="token punctuation">]</span><span class="token punctuation">:</span>state<span class="token punctuation">[</span>counter<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> state    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="store"><a href="#store" class="headerlink" title="store"></a>store</h1><blockquote><p>Store 就是把action和reducers联系到一起的对象。Store 有以下职责：</p><ul><li>维持应用的 state；</li><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 方法更新 state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器。<br>再次强调一下 Redux 应用只有一个单一的 store。当需要拆分数据处理逻辑时，你应该使用 reducer 组合 而不是创建多个 store。</li></ul></blockquote><p>这边用到了 Redux 库提供的 <code>createStore</code> 函数，这个函数第一个参数代表更新状态的 <code>reducer</code>，第二个参数是状态的初始值，第三个参数可选，代表 <code>Store Enhancer</code>,在这边暂时用不到</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"> <span class="token comment" spellcheck="true">//store.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>createStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducers.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> initValues <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Frist'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'Second'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token string">'Third'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token keyword">const</span> store<span class="token operator">=</span> createStore <span class="token punctuation">(</span>reducer <span class="token punctuation">,</span> initValues<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p> state通过getState()方法来获取,获取我们需要的数据之后，初始化本地的state数据，</p><p> 数据变化则通过<code>store.dispatch()</code>来提交对应动作，通知<code>redux</code>更新数据，为了保持<code>redux</code>数据和本地<code>state</code>数据保持一致，我们需要监听<code>redux</code>的数据变化，来同步更新本地的<code>state</code>数据,监听<code>redux</code>数据变化通过<code>store.subscribe()</code>方法，该方法接受一个回调，数据变化后触发回调，回调中我们加入本地数据的更新。</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"> <span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'.. /Store.js'</span><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOwnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getOwnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                value<span class="token punctuation">:</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>caption<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//父组件传入对应的数据key</span>                    <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    onChange <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数据更新</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOwnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//监听数据变化</span>        store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//卸载监听</span>        store<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//提交增加动作</span>        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>Actions<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>caption<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">onDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//提交减少动作</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>Actions<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>caption <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 同理，父组件中的计算求和也是先从redux中初始化数据，然后监听变化来更新数据</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'../Store.js'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Summary</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOwnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOwnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getOwnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> sum<span class="token punctuation">:</span> sum <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> redux的理念来自于flux，强调的是“单向数据流”的管理方式，所有的数据都统一管理，所有的数据变化都需要提交dispatcher，无法直接修改数据，防止的数据的紊乱，不统一导致的问题。</p>]]></content>
    
    <summary type="html">
    
      Redux 是 JavaScript 状态容器，提供可预测化的状态管理。可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。
    
    </summary>
    
      <category term="redux" scheme="https://wekerSnail.github.io/categories/redux/"/>
    
    
      <category term="redux" scheme="https://wekerSnail.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>nvm-windows:windows下的node版本管理</title>
    <link href="https://wekerSnail.github.io/2019/01/10/nvm-windows/"/>
    <id>https://wekerSnail.github.io/2019/01/10/nvm-windows/</id>
    <published>2019-01-10T05:22:04.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<p>nvm是mac/linux系统上比较好用的一款node版本管理工具，然后它并不支持windows系统，好在有人另外开发了支持windows的node的多版本管理工具,nvm-windows</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>windows提供直接下载的安装包 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">下载</a></p><p><em>该工具不能和现有的node共存，如要安装使用，需要先写在本机上的node</em></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><pre class="line-numbers language-bash" mdui-tooltip="{content: 'bash'}"><code class="language-bash">nvm --help //可以调出nvm的使用帮助nvm list available //查看所有的node版本nvm <span class="token function">install</span> version 安装对应版本的nodenvm use version //使用对应版本的nodenvm list  //查看本机安装的node版本nvm uninstall version //删除对应的版本node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>nvm use version</code> 切换需要的node版本，就可以正常使用node环境了，安装cnpm 镜像源也是没有问题了</p>]]></content>
    
    <summary type="html">
    
      nvm是mac/linux系统上比较好用的一款node版本管理工具，然后它并不支持windows系统，好在有人另外开发了支持windows的node的多版本管理工具,nvm-windows
    
    </summary>
    
    
      <category term="node" scheme="https://wekerSnail.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>wepy分包加载问题</title>
    <link href="https://wekerSnail.github.io/2018/12/18/wepy-subpackage/"/>
    <id>https://wekerSnail.github.io/2018/12/18/wepy-subpackage/</id>
    <published>2018-12-18T03:38:25.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<p>在使用分包加载的配置后，wepy的打包是没有问题的，正常的编译了所有的文件，然后在主包页面往分包页面跳转的时候就出现问题了。</p><p>编译器始终报页面没有正确配置或者实例化，不能正确的跳转我需要的问题。</p><p>于是就想会不会是分包后的跳转方式和原来不一样，而然看遍了文档，都是说跳转方式一样，百度，google分包的问题，没有找到解决方法。</p><p>只能先分析一下到底是什么原因导致的，首先用完全原生的小程序试了一下分包的跳转，写法一样，跳转也正常，那么基本可以肯定是wepy这边的问题。要么是我的配置不对，要么是wepy的跳转写法有什么讲究？</p><p>立马去wepy的仓库看一下issues,果然有类似问题</p><p><img src="http://wx3.sinaimg.cn/mw690/99acde33gy1fyatjfmo9tj20kt0czwg8.jpg" alt="wepy"></p><p><img src="http://wx2.sinaimg.cn/mw690/99acde33gy1fyatjlnfbbj20je0f3tb4.jpg" alt="wepy"></p><p>立马找到app.wpy中的subpackage给成subPackage，再次打包编译，果然跳转正常了。</p><p>然而这个问题在wepy的文档中并没有提到，这点还是比较坑的，不知道后期版本会不会更新这个问题</p>]]></content>
    
    <summary type="html">
    
      使用wepy开发小程序时，使用小程序的分包加载，页面跳转时出现问题的解决
    
    </summary>
    
      <category term="小程序" scheme="https://wekerSnail.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://wekerSnail.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>canvas接红包游戏</title>
    <link href="https://wekerSnail.github.io/2018/12/15/jjz/"/>
    <id>https://wekerSnail.github.io/2018/12/15/jjz/</id>
    <published>2018-12-15T06:55:22.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作业务基本用不到canvas，所以之前对canvas也没有做多少了解，仅是知道canvas是html5中用于绘制图形使用，通过js可以绘制出任意的图形，也可以通过连续的绘制，来实现动画的效果。性能上要优于直接操作dom实现的动画，当然也比flash的动画性能要好。但是对于实际的用法并没有太多了解</p><p>不过最近看canvas应用挺多，用来做一些简单的动画或者游戏还是比较实用的，于是就研究了一下，也写了一个简单的游戏来实践一下。也就是下面要讲到的接红包游戏</p><p>接红包要实现的效果比较简单，红包从屏幕上部往下落，玩家操纵底部的人来接住落下的红包，接住就加分，接住炸弹则扣分，模型如下图<br><img src="http://wx2.sinaimg.cn/mw690/99acde33gy1fy9k84kx5zj206b08qwea.jpg" alt="接红包草图"></p><p>从图上可以看出，这个游戏主要需要处理的就两个对象，一个红包对象，一个就是下面操作的接红包的人，所以我们需要编写的两个模型就是红包模型和人模型</p><h1 id="drawImage"><a href="#drawImage" class="headerlink" title="drawImage()"></a>drawImage()</h1><p>说下面的具体实现之前,首先说一下主要用到的canvas api,这边的游戏图形基本用的是图片来显示的，所以就需要用到canvas中的绘制图片的api</p><p>drawImage主要用三种用法</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//仅提供图片和绘制的起始位置，绘制出的图片大小由图片本身决定</span><span class="token number">2</span><span class="token punctuation">.</span> context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提供图片，以及起始位置和显示的宽高</span><span class="token number">3</span><span class="token punctuation">.</span> context<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">,</span>swidth<span class="token punctuation">,</span>sheight<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个是切图的用法，提供图片以及剪切的起始位置和宽高，以及绘制的起始位置和宽高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该游戏用到的都是切好的图片，所以理所当然用的也就是第二种drawImage的方式</p><h1 id="主体部分"><a href="#主体部分" class="headerlink" title="主体部分"></a>主体部分</h1><p>这边使用一个Game类来对游戏做全局的管理</p><p>Game类中需要初始化一些基本的参数，比如画布的初始化，游戏基本参数的初始化</p><ul><li>屏幕大小参数</li><li>游戏状态</li><li>红包的数据集合</li><li>操作状态</li><li>时间</li><li>得分<br>…</li></ul><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//游戏结束</span><span class="token keyword">this</span><span class="token punctuation">.</span>touching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否触摸财神</span><span class="token keyword">this</span><span class="token punctuation">.</span>moneyList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//掉落集合</span><span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//游戏时间</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="红包部分"><a href="#红包部分" class="headerlink" title="红包部分"></a>红包部分</h1><h3 id="红包初始化"><a href="#红包初始化" class="headerlink" title="红包初始化"></a>红包初始化</h3><p>首先要考虑的是单个红包需要的属性：</p><ul><li>红包的x轴起始位置</li><li>红包的y轴起始位置</li><li>红包的宽度</li><li>红包的高度</li><li>红包的类型</li><li>红包的分值</li><li>红包的状态 //正在下落，已被接住，没有接住</li><li>红包的速度 //不同的红包下落的速度不相同</li></ul><p><em>根据这些我们就可以写出我们的红包类:</em></p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">var</span> money <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> ob<span class="token punctuation">.</span>type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0正在掉落，1接住 ，2没接住</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>widths <span class="token operator">=</span> ob<span class="token punctuation">.</span>widths<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heights <span class="token operator">=</span> ob<span class="token punctuation">.</span>heights<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token operator">=</span>ob<span class="token punctuation">.</span>status<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token operator">=</span>ob<span class="token punctuation">.</span>speed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实际上红包就几种类型，所以我们不需要像上面那样每个参数都一一传入，我们可以编写一个红包的类型集合，然后传入一个<code>type</code>，来获取那些固定的初始参数，比如<code>宽度，高度，分值，速度，类型</code></li></ul><h3 id="红包绘制"><a href="#红包绘制" class="headerlink" title="红包绘制"></a>红包绘制</h3><p>参数初始化完成之后，就需要绘制出这个红包:<em>我们绘制的时候其实只需要绘制出正在下落的红包，接住和没接住错过的，都是看不到的，所以不需要绘制，所以这边就需要用到红包的状态</em></p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">money<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//0代表正在下落的状态</span>            game<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>moneyEnum<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>image<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> moneyEnum<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>widths<span class="token punctuation">,</span> moneyEnum<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>heights<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="红包的接住操作"><a href="#红包的接住操作" class="headerlink" title="红包的接住操作"></a>红包的接住操作</h3><p>红包接没接住，其实就是看这个红包有没有和下面移动的小人有没有接触过，图形上来看，就是有没有重叠过</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">money<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>drop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//速度叠加</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span><span class="token operator">=</span> moneyEnum<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>speed<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次下落的距离</span>        <span class="token keyword">var</span> top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y        <span class="token keyword">var</span> bottom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heights        <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x        <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>widths        <span class="token keyword">var</span> caiY <span class="token operator">=</span> game<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>h <span class="token operator">-</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>h        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> caiY <span class="token operator">&lt;=</span> bottom <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> left <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token operator">+</span>game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">+</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">+</span>game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">+</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w<span class="token punctuation">)</span> <span class="token operator">>=</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            game<span class="token punctuation">.</span>score <span class="token operator">+</span><span class="token operator">=</span> moneyEnum<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录总分数</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">>=</span> game<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这边写的比较随意，大致的意思就是比较红包的底部是不是低于小人，并且左边在小人两边之间，或者右边在小人两边之间，满足这个条件也就是他们有接触</p><p>当然满足这些的同时，红包还得是还在屏幕内，出了屏幕外当然不行，所以下面的判断就是把出屏幕的设置为没接住</p><h1 id="小人部分"><a href="#小人部分" class="headerlink" title="小人部分"></a>小人部分</h1><p>和红包部分基本类似，首先就是声明基本的参数类型</p><p>小人主要需要的参数</p><ul><li>x轴起始位置</li><li>y轴起始位置</li><li>小人宽度</li><li>小人高度</li></ul><p>小人只有左右移动的功能，所以四个参数基本够用了</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">var</span> body<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>w<span class="token operator">=</span>xx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//宽度</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token operator">=</span>xx<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//高度</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果要居中就是手机屏幕宽度一半减去小人宽度一半</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>game<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>h<span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>h <span class="token comment" spellcheck="true">//居于底部，所以y轴位置固定</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="小人移动"><a href="#小人移动" class="headerlink" title="小人移动"></a>小人移动</h1><p>小人移动需要修改的仅仅是小人的x轴参数</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">   body<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>move <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        game<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>cai<span class="token punctuation">,</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>game<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>h <span class="token operator">-</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w<span class="token punctuation">,</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h1><p>现在基本的模块都有了，需要的就是把他们整合起来，形成游戏</p><p>首先就是让红包落下来</p><h2 id="红包下落"><a href="#红包下落" class="headerlink" title="红包下落"></a>红包下落</h2><p>随机生成红包对象，加入红包的集合中</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">    Game<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addMoney <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//掉钱</span>        <span class="token keyword">var</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> game<span class="token punctuation">.</span>five_num_left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>game<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">money</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> game<span class="token punctuation">.</span>pig_num_left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>game<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">money</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> game<span class="token punctuation">.</span>boom_num_left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>game<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">money</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"boom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> game<span class="token punctuation">.</span>cloud_num_left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>game<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>moneyList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">money</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">"cloud"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整体游戏的绘制<br>由game主体去控制所有部分的绘制</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">    Game<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//首先清屏</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>moneyList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用红包各自的下落绘制</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这边可以不用参考，因为编写的时候我并没有写小人类，而是直接写入了game类中，所以这边直接调用的小人的移动绘制</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.score'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"得分:"</span> <span class="token operator">+</span> game<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//得分更新</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下就是移动的事件编写了，目前移动的方法都已经写好了，但是小人移动的事件还没有</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchstart'</span><span class="token punctuation">,</span> touch<span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作事件总共三个事件，开始触摸，移动，结束触摸</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchmove'</span><span class="token punctuation">,</span> touch<span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'touchend'</span><span class="token punctuation">,</span> touch<span class="token punctuation">,</span> <span class="token punctuation">{</span>passive<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">function</span> <span class="token function">touch</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//点击</span>            <span class="token keyword">var</span> event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>            event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"touchmove"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//移动操作的前提就是正在操作状态，然后把移动的x值付给小人，为了让手指居中，我们可以减去小人宽度一半</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>touching<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX <span class="token operator">-</span> that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX <span class="token operator">>=</span>that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w <span class="token operator">/</span> <span class="token number">2</span>  <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX <span class="token operator">&lt;=</span>that<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>w<span class="token operator">-</span>that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">=</span> event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX <span class="token operator">-</span> that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w <span class="token operator">/</span> <span class="token number">2</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">=</span> that<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>w <span class="token operator">-</span> that<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"touchstart"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//开始触摸时，判断是否触摸的是小人的部分，不是小人就不处理，是小人就设置为正在操作状态</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX <span class="token operator">></span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX <span class="token operator">&lt;</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>x <span class="token operator">+</span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY <span class="token operator">></span> game<span class="token punctuation">.</span>rect<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        that<span class="token punctuation">.</span>touching <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"touchend"</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//结束触摸状态</span>                    that<span class="token punctuation">.</span>touching <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就剩让游戏开始了</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">    Game<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">var</span> addInterval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//首先开始落红包，游戏没结束就持续的下落</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>that<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                that<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>phone<span class="token punctuation">.</span>w <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//50是估计值，此处应取红包最大宽度，防止落出屏幕</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">clearInterval</span><span class="token punctuation">(</span>addInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> animate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//调用主体的绘制部分</span>            that<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>that<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">requestNextAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> timedCount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//游戏倒计时以及状态更新</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".time_out"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">"剩余时间:"</span> <span class="token operator">+</span> that<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>time <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>clock<span class="token punctuation">)</span><span class="token punctuation">;</span>                that<span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">change</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                that<span class="token punctuation">.</span>time <span class="token operator">=</span> that<span class="token punctuation">.</span>time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                that<span class="token punctuation">.</span>clock <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>timedCount<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">timedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">requestNextAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>到这边，整个游戏的编写就基本上结束了,接下来只需要在需要的页面实例化一下<code>Game</code>就可以了<br>最后的效果<br><img src="http://wx1.sinaimg.cn/small/99acde33gy1fy9o371nocj208l0f5mxy.jpg" alt="游戏效果界面"></p>]]></content>
    
    <summary type="html">
    
      基于canvas的接红包游戏
    
    </summary>
    
      <category term="canvas" scheme="https://wekerSnail.github.io/categories/canvas/"/>
    
    
      <category term="canvas" scheme="https://wekerSnail.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>wepy-mpvue对比</title>
    <link href="https://wekerSnail.github.io/2018/11/28/wepy-mpvue/"/>
    <id>https://wekerSnail.github.io/2018/11/28/wepy-mpvue/</id>
    <published>2018-11-28T07:44:35.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wepy对比mpvue"><a href="#wepy对比mpvue" class="headerlink" title="wepy对比mpvue"></a>wepy对比mpvue</h1><h2 id="小程序配置部分"><a href="#小程序配置部分" class="headerlink" title="小程序配置部分"></a>小程序配置部分</h2><p>wepy可以配置小程序开发者工具的设置项 ，mpvue没有相关配置</p><pre class="line-numbers language-json" mdui-tooltip="{content: 'json'}"><code class="language-json"><span class="token punctuation">{</span>//project.config.json文件<span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"project description"</span><span class="token punctuation">,</span>  <span class="token property">"setting"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"urlCheck"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"es6"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"postcss"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"minified"</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"compileType"</span><span class="token operator">:</span> <span class="token string">"miniprogram"</span><span class="token punctuation">,</span>  <span class="token property">"appid"</span><span class="token operator">:</span> <span class="token string">"touristappid"</span><span class="token punctuation">,</span>  <span class="token property">"projectname"</span><span class="token operator">:</span> <span class="token string">"Project name"</span><span class="token punctuation">,</span>  <span class="token property">"miniprogramRoot"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wepy全局配置和页面配置都集成进了页面单文件内,mpvue需要单独的main.json配置文件</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">wepy<span class="token punctuation">.</span>page</span> <span class="token punctuation">{</span>    config <span class="token operator">=</span> <span class="token punctuation">{</span>        window<span class="token punctuation">:</span> <span class="token punctuation">{</span>      backgroundTextStyle<span class="token punctuation">:</span> <span class="token string">'light'</span><span class="token punctuation">,</span>      navigationBarBackgroundColor<span class="token punctuation">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>      navigationBarTitleText<span class="token punctuation">:</span> <span class="token string">'WeChat'</span><span class="token punctuation">,</span>      navigationBarTextStyle<span class="token punctuation">:</span> <span class="token string">'black'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>wepy和mpvue都支持组件化，写法和使用和vue的写法基本一致，区别在于</p><p>mpvue的使用和vue完全一样，wepy稍有不同，wepy同页面使用相同组件是，需要不同的声明</p><p><strong>mpvue不支持slot组件，wepy支持</strong></p><pre class="line-numbers language-html" mdui-tooltip="{content: 'html'}"><code class="language-html">// index.wpy//使用两个Counter组件时，components中需要区别声明再来使用，mpvue是声明一次对此重复使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>panel</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>panel</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter1</span> <span class="token attr-name">:num</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter2</span> <span class="token attr-name">:num.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>syncNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>import wepy from 'wepy';//引入List、Panel和Counter组件import List from '../components/list';import Panel from '../components/panel';import Counter from '../components/counter';export default class Index extends wepy.page {    //页面配置    config = {        "navigationBarTitleText": "test"    };    //声明页面中将要使用到的组件    components = {        panel: Panel,        counter1: Counter,        counter2: Counter,        list: List    };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">mpvue一个页面由三个文件构成main<span class="token punctuation">.</span>json<span class="token punctuation">,</span>index<span class="token punctuation">.</span>vue<span class="token punctuation">,</span>mian<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">wepy一个单文件 xxx<span class="token punctuation">.</span>wpy配置也写在js部分，参看上文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="对于原生api的影响"><a href="#对于原生api的影响" class="headerlink" title="对于原生api的影响"></a>对于原生api的影响</h2><ul><li><p>mpvue对于原生api没有任何影响，直接和原生的使用方式一样</p></li><li><p>wepy对于原生api做了优化处理，通过配置，可以使用promise封装的api，对并发处理更优,wepy中的<code>wx.xx</code>接口都改为<code>wepy.xx</code></p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">import</span> wepy <span class="token keyword">from</span> <span class="token string">'wepy'</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用promise方式的api，支持es7的异步管理</span>    <span class="token keyword">await</span> wepy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> <span class="token keyword">await</span> wepy<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//promise方式的请求</span>wepy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="wxml部分"><a href="#wxml部分" class="headerlink" title="wxml部分"></a>wxml部分</h2><ul><li>mpvue支持wxml的所有标签，但是数据绑定方式是按照vue方式来，事件绑定方式也是按照vue方式</li><li>wepy同样支持所有的wxml标签，数据绑定方式和原生一样，事件绑定和原生略有不同，<a href="https://tencent.github.io/wepy/document.html#/?id=%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">参看文档</a></li></ul><h2 id="wxss部分"><a href="#wxss部分" class="headerlink" title="wxss部分"></a>wxss部分</h2><p>两者基本相同，都支持预处理器</p><h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><ul><li><p>mpvue基本和vue相同，生命周期兼容vue和小程序两者生命周期</p></li><li><p>wepy写法类vue，结构类react，生命周期遵从小程序规范</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">import</span> wepy <span class="token keyword">from</span> <span class="token string">'wepy'</span>    <span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'../components/child'</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">wepy<span class="token punctuation">.</span>page</span> <span class="token punctuation">{</span>        components <span class="token operator">=</span> <span class="token punctuation">{</span>            child<span class="token punctuation">:</span> Child        <span class="token punctuation">}</span>        methods <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//此处和vue的methods不同，此处的methods仅是dom事件，自定义事件直接写在class下面</span>            parentFn <span class="token punctuation">(</span>num<span class="token punctuation">,</span> evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'parent received emit event, number is: '</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>两者都是数据动态绑定，直接赋值即可<code>this.title = &#39;this is title&#39;;</code></p><p>不同之处：wepy在异步的数据跟新时需要手动刷新一下this.$apply()</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'this is title'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><ul><li>mpvue使用vuex</li><li>wepy使用redux(wepy-redux)</li></ul><blockquote><p>待完善…</p></blockquote>]]></content>
    
    <summary type="html">
    
      mpvue和wepy两个小程序开发框架的区别对比
    
    </summary>
    
      <category term="小程序" scheme="https://wekerSnail.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://wekerSnail.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>mpvue</title>
    <link href="https://wekerSnail.github.io/2018/11/23/mpvue/"/>
    <id>https://wekerSnail.github.io/2018/11/23/mpvue/</id>
    <published>2018-11-23T03:20:39.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mpvue-小程序开发"><a href="#mpvue-小程序开发" class="headerlink" title="mpvue-小程序开发"></a>mpvue-小程序开发</h1><p><a href="http://note.youdao.com/noteshare?id=0a4e6668de883f2ec14c36bbc6a3d294" target="_blank" rel="noopener">有道笔记文档</a></p><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><p>使用 <code>mpvue</code> 开发小程序，你将在小程序技术体系的基础上获取到这样一些能力：</p><ul><li>彻底的组件化开发能力：提高代码复用性</li><li>完整的 <code>Vue.js</code> 开发体验</li><li>方便的 <code>Vuex</code> 数据管理方案：方便构建复杂应用</li><li>快捷的 <code>webpack</code> 构建机制：自定义构建策略、开发阶段 hotReload</li><li>支持使用 npm 外部依赖</li><li>使用 <code>Vue.js</code> 命令行工具 vue-cli 快速初始化项目</li><li>H5 代码转换编译成小程序目标代码的能力</li></ul><h2 id="配套设施"><a href="#配套设施" class="headerlink" title="配套设施"></a>配套设施</h2><p><code>mpvue</code> 作为小程序版本的 <code>Vue.js</code>，在框架 SDK 之外，完整的技术体系还包括如下设施。</p><ul><li><a href="http://mpvue.com/build/mpvue-loader" target="_blank" rel="noopener">mpvue-loader</a> 提供 webpack 版本的加载器</li><li><a href="http://mpvue.com/build/mpvue-webpack-target" target="_blank" rel="noopener">mpvue-webpack-target</a> webpack 构建目标</li><li><a href="http://mpvue.com/build/postcss-mpvue-wxss" target="_blank" rel="noopener">postcss-mpvue-wxss</a> 样式代码转换预处理工具</li><li><a href="http://mpvue.com/build/px2rpx-loader" target="_blank" rel="noopener">px2rpx-loader</a> 样式转化插件</li><li><a href="http://mpvue.com/build/mpvue-lint" target="_blank" rel="noopener">mpvue-lint</a> 开发辅助插件，包括语法检查，内存检查等功能</li><li>[官方文档](<a href="http://mpvue.com/）" target="_blank" rel="noopener">http://mpvue.com/）</a></li></ul><p><strong>mpvue-lint会对代码做格式化检查，对编码规范要求比较严格，如果不需要可以项目初始化时不安装，或者注释rules部分的配置</strong></p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token comment" spellcheck="true">//build/webpack.base.config.js   </span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">/*{        test: /\.(js|vue)$/,        loader: 'eslint-loader',        enforce: 'pre',        include: [resolve('src'), resolve('test')],        options: {          formatter: require('eslint-friendly-formatter')        }*/</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'mpvue-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> vueLoaderConfig      <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="mpvue使用vue式的路由跳转"><a href="#mpvue使用vue式的路由跳转" class="headerlink" title="mpvue使用vue式的路由跳转"></a>mpvue使用vue式的路由跳转</h5><ul><li><p>插件支持<code>mpvue-router-patch</code></p></li><li><p>使用</p><pre><code>// main.jsimport Vue from &#39;vue&#39;import MpvueRouterPatch from &#39;mpvue-router-patch&#39;Vue.use(MpvueRouterPatch)</code></pre></li><li><p><a href="https://github.com/F-loat/mpvue-router-patch" target="_blank" rel="noopener">文档</a></p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code># 3. 全局安装 vue-cli,安装vue时安装过就不需要在安装了# 一般是要 sudo 权限的$ npm install --global vue-cli@2.9# 4. 创建一个基于 mpvue-quickstart 模板的新项目# 新手一路回车选择默认就可以了$ vue init mpvue/mpvue-quickstart my-project# 安装完成npm run dev之后，会生成一个dist文件夹# 使用微信开发者工具导入dist下的项目就可以运行小程序的代码了</code></pre><h4 id="语法差异"><a href="#语法差异" class="headerlink" title="语法差异"></a>语法差异</h4><ol><li><p>文件结构</p><ul><li><p>小程序文件由四个文件构成<code>json、wxml、wxss、js</code></p></li><li><p>mpvue由两个文件构成三个文件构成<code>main.json、index.vue、main.js</code></p></li><li><p>mpvue .vue文件结构</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token comment" spellcheck="true">//wxml</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">//wxss</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//js</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>main.js为mpvue入口文件</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token comment" spellcheck="true">//引入vue</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./index'</span> <span class="token comment" spellcheck="true">//引入.vue组件</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//生产vue实例</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//挂载实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>配置部分</p><ul><li>文件目录<code>src/app.json</code></li><li>配置参数和小程序官方一致<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html" target="_blank" rel="noopener">参考文档</a></li></ul></li><li><p>wxml</p><ul><li>小程序所用标签皆可直接在mpvue中直接使用</li><li>mpvue中直接使用div会编译成view标签</li><li>小程序<code>wx:if wx:else</code>对应mpvue中<code>v-if v-else</code></li><li>小程序<code>wx:for</code> 对应mpvue中<code>v-for</code></li><li>小程序<code>&lt;text&gt;&lt;/text&gt;</code>写法和mpvue一致</li><li>小程序动态参数属写法<code>attr=&quot;&quot;</code>对应mpvue<code>:attr=&quot;attr&quot;</code></li><li>除此之外vue原生支持的动态绑定class mpvue也支持 <code>:class=&quot;class&quot;</code>，但此处不支持函数式的class返回值</li></ul></li><li><p>wxss</p><ul><li>mpvue支持npm安装css预处理器<code>sass、less、stulys...</code></li><li>mpvue会把style中的px转换成rpx，若不希望装换可写成大写的PX</li></ul></li><li><p>js</p><ul><li>mpvue的js写法基本保持了vue原生的写法，支持vue的所有生命周期，也可以使用小程序的生命周期</li><li>mpvue的数据变化支持双向绑定</li><li>mpvue可直接调用wx的api</li></ul></li><li><p>vuex的使用</p><ul><li><p>store.js文件 //使用基本和原生vuex一样</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token comment" spellcheck="true">//引入vue</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span> <span class="token comment" spellcheck="true">//引入 vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用vuex</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> obj <span class="token operator">=</span> state      obj<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    decrement<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> obj <span class="token operator">=</span> state      obj<span class="token punctuation">.</span>count <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h4 id="mpvue注意点"><a href="#mpvue注意点" class="headerlink" title="mpvue注意点"></a>mpvue注意点</h4><ol><li><code>mpvue-router-patch</code>的路由插件不是必须的，可以使用微信官方的路由api实现</li><li>mpvue新增页面之后，需要重启服务，重新编译新文件，否则新页面会无法加载</li><li>小程序的事件 bind 需要替换为 @</li><li>mpvue不支持自定义指令</li><li>小程序dom操作不友好，ref使用不好</li><li>小程序html中引入数据不支持函数，类似class不支持函数（return value方式）</li></ol>]]></content>
    
    <summary type="html">
    
      使用mpvue开发小程序的一些总结
    
    </summary>
    
      <category term="小程序" scheme="https://wekerSnail.github.io/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://wekerSnail.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信支付IOS的坑点</title>
    <link href="https://wekerSnail.github.io/2018/09/28/wx-pay/"/>
    <id>https://wekerSnail.github.io/2018/09/28/wx-pay/</id>
    <published>2018-09-28T02:58:22.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>移动端项目的公众号内需要一个下单支付的功能，一初的开发结束是拿安卓做了一下测试，ok，没有问题，于是就提交给了测试。</p><p>结果在测试那边使用到ios手机是，首先是报签名错误，然后点击微信支付报url未注册，也就是配置的支付目录不正确。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>遇到问题之后，首先是检查了一下代码，调试输出各个参数，发现没有参数错误，于是就有点懵了。</p><p>google了一下ios微信签名错误的问题，发现有不少类似的问题。查阅了几篇下来，差不多都有提到ios的一个特性，就是vue的history在IOS下，页面跳转，而地址栏是不刷新的。但是此时我们使用location.href取取值的话，取到的值是正确的值，也就是说此时的地址栏和location.href的值是不一致的，这就导致了微信签名是我们的取值和微信jssdk的取值其实是不一致的，最后导致了签名的失败</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>既然是因为url的不一致导致的签名失败，那么我们只需要让url的值一致就可以了。</p><p>前面我们也知道了是由于ios的原因导致vue的跳转实际地址栏没有变化，那么我们签名的时候只需要使用我们一初进入时候的页面地址就可以了。所以我们可以在<code>app.vue的create或者mounted</code>中去获取一下当前的地址，并缓存起来，然后在需要签名的地方在取出来使用就ok了。</p><p>这里需要注意的时，安卓端并无此问题，安卓是会正常刷新地址栏的，所以这边的签名获取需要有所区别，<code>url: isAndroid() ? 当前地址 : 缓存地址</code>。</p><p>按照上面的方法修改之后，在测试，果然ios和安卓的签名都没有问题了。<strong>不过签名的问题解决了，ios支付的问题仍然存在</strong>，根据提示的警告信息，可以看出是地址没有配置，但是我们明明配置了地址啊。所以这边也不难想到，也是签名ios的特性导致的地址没刷新，所以到了支付的时候的地址其实还是一初进入的地址，而不是我们配置的地址，所以微信这边就识别出错了。</p><p>解决方法依然是一样的思路，更新地址就行，这边没法用缓存了，因为是微信自己去取的，我们只能让页面刷新一下地址才行，那么我们有两个选择</p><ul><li>前一个页面使用location.href=url去跳转</li><li>当前支付页面location.reload()刷新一下</li></ul><p>我们选择了后者，1.我们页面有一些参数等，使用location.href则要自己拼上，比较麻烦，也容易出错，2.不使用vue的router跳转会让我们在路由导航写的一些方法失效。</p><p>所以还是刷新页面比较适合我们，为了保证页面的渲染性能，我们在<code>created</code>的周期中就开始刷新页面，使用localstorage去记录是否是首次进入，只有首次进入才需要刷新，刷新完就不需要刷新了</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js"> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localStorage<span class="token punctuation">.</span>reload<span class="token punctuation">)</span> <span class="token punctuation">{</span>          localStorage<span class="token punctuation">.</span>reload <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">;</span>        <span class="token function">fOpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fJsTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'reload'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，ios和安卓的不同之处还是比较多的，这只是我们遇到的其中之一个坑，填坑路漫漫，好在前人栽树后人乘凉，没有别人的经验分享，这些问题可能就会困扰我们很久才能解决</p>]]></content>
    
    <summary type="html">
    
      移动端项目的公众号内需要一个下单支付的功能，一初的开发结束是拿安卓做了一下测试，ok，没有问题，于是就提交给了测试。结果在测试那边使用到ios手机是，首先是报签名错误，然后点击微信支付报url未注册，也就是配置的支付目录不正确。
    
    </summary>
    
      <category term="wx" scheme="https://wekerSnail.github.io/categories/wx/"/>
    
    
      <category term="wx" scheme="https://wekerSnail.github.io/tags/wx/"/>
    
  </entry>
  
  <entry>
    <title>github-pages部署单页应用</title>
    <link href="https://wekerSnail.github.io/2018/09/24/github-page/"/>
    <id>https://wekerSnail.github.io/2018/09/24/github-page/</id>
    <published>2018-09-24T07:25:53.000Z</published>
    <updated>2019-04-10T08:34:01.323Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx2.sinaimg.cn/mw690/99acde33gy1fvlm8f96obj21fw0neto1.jpg" alt></p><p>github提供了很好的gitpage用于部署页面，并且是免费的，如果只是一些静态的页面不需要跟本地数据库交互，就完全可以部署在gitpage上面。</p><p>下面就通过一个简单的webpack打包的react页面的部署，来介绍一个如何部署静态页面到github。</p><ul><li><p>首先来到github中该demo的源码仓库，通过新建分支，新建一个gh-pages的分支<img src="http://wx2.sinaimg.cn/mw690/99acde33gy1fvlm8xs6uij20k30a1aag.jpg" alt="新建分支"></p></li><li><p>新建完分支，来到页面上部的settings部分，点击进入<img src="http://wx3.sinaimg.cn/mw690/99acde33gy1fvlm90an95j20lb08waae.jpg" alt="点击setting"></p></li><li><p>在settings页面中，找到gitpage的地址，也就是该页面部署完后的访问地址<img src="http://wx3.sinaimg.cn/mw690/99acde33gy1fvlm92wysoj20ol0bmaas.jpg" alt="github page地址"></p></li><li><p>复制该地址，打开demo的webpack的配置文件package.json，添加homepage的配置<img src="http://wx2.sinaimg.cn/mw690/99acde33gy1fvlm95ksnwj20gy0g2dh2.jpg" alt="homepage设置"></p></li><li><p>修改完配置之后，运行npm run build打包demo代码，打包完成之后，打开gitdesktop，选择改github仓库中的gh-page分支<img src="http://wx4.sinaimg.cn/mw690/99acde33gy1fvlm98hgb7j20y10nrwfz.jpg" alt="分支选择"></p></li><li><p>将打包完的文件，也就是build文件夹下的文件同步进入该分支，同步完成就完成了整个demo的部署，直接访问之前赋值的地址就可以看到运行之后的页面了。</p><pre><code>打包的时候如果需要设置根目录的实话，需要把根目录设置成github上的仓库目录，不然有些静态资源会加载错误</code></pre></li></ul><p>  通过这样的方式，我们可以很方便的在github上分享自己的代码的同时，也可以直接让其他人查看到demo的最终效果，甚至可以通过该方式去部署一些自己的个人博客网站等等。</p>]]></content>
    
    <summary type="html">
    
      github提供了很好的gitpage用于部署页面，并且是免费的，如果只是一些静态的页面不需要跟本地数据库交互，就完全可以部署在gitpage上面。
    
    </summary>
    
      <category term="github" scheme="https://wekerSnail.github.io/categories/github/"/>
    
    
      <category term="github" scheme="https://wekerSnail.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>vscode新开文件覆盖原文件问题</title>
    <link href="https://wekerSnail.github.io/2018/09/10/vscode-preview/"/>
    <id>https://wekerSnail.github.io/2018/09/10/vscode-preview/</id>
    <published>2018-09-10T07:00:23.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用vscode的时候发现当你打开一个文件在编辑时，再去打开另一个文件，原来的文件就会被新打开的文件替换。这就导致你在编辑多个文件的时候就非常麻烦，编辑完一个就要去找另一个。感觉如此的设计很不合理，按理vscode的设计不可能不会注意到这么简单的问题，其实这是vscode的一个预览功能。<br>注意观察连个两个打开文件的区别，标题字体一个是正的，一个是斜体<br><img src="http://wx2.sinaimg.cn/mw690/99acde33gy1fv4et49bw4j2060033743.jpg" alt="正体"><br><strong>正体</strong><br><img src="http://wx4.sinaimg.cn/mw690/99acde33gy1fv4esyk849j207x04h744.jpg" alt="斜体"><br><strong>斜体</strong></p><p>正体的是正常打开的文件，而斜体就是vscode的预览功能，主要用于快速查看文件使用的，不会导致打开很多的文件。</p><p>所以正常打开文件的操作其实应该是双击文件，而预览文件则是单击。如果不需要这个功能，可以在设置中取消，配置如下：<br><img src="http://wx2.sinaimg.cn/mw690/99acde33gy1fv4et8vwrfj20p00blt9s.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      最近在使用vscode的时候发现当你打开一个文件在编辑时，再去打开另一个文件，原来的文件就会被新打开的文件替换。这就导致你在编辑多个文件的时候就非常麻烦，编辑完一个就要去找另一个。感觉如此的设计很不合理，按理vscode的设计不可能不会注意到这么简单的问题，其实这是vscode的一个预览功能。
    
    </summary>
    
      <category term="vscode" scheme="https://wekerSnail.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="https://wekerSnail.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>hexo-next主题设置</title>
    <link href="https://wekerSnail.github.io/2018/09/04/hexo-next/"/>
    <id>https://wekerSnail.github.io/2018/09/04/hexo-next/</id>
    <published>2018-09-04T01:05:24.000Z</published>
    <updated>2019-04-10T08:34:01.323Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26508242&auto=1&height=66"></iframe>  <p>hexo搭建博客的自由度还是比较高的，特别是博客的主题非常多，有各种第三方的主题。通过主题的更换，可以让博客有不同的风格，并且切换的过程相对简单，方便。</p><p>下面就以next主题为例，大致的梳理一下更换主题的过程：</p><ol><li>再hexo文件夹中，打开命令行工具，输入<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>,该命令会再<code>themes</code>文件夹下克隆<code>next</code>主题的仓库。</li><li>修改hexo的配置<ul><li>打开hexo的配置文件<code>_config.yml</code>,找到<code>theme:</code>配置项，更改为<code>next</code></li><li>找到<code>site</code>项填上自己的博客名</li><li>找到<code>language</code>项，填上<code>en//英文或者zh-Hans//中文</code></li></ul></li><li>设置完成就可以再次部署<br>命令行输入<pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">    hexo g    hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>部署成功之后，就可以再次回到自己的博客地址查看效果了，也可以<code>hexo s</code>先再本地预览一下效果</li></ol><p>参考：</p><ul><li>next主题使用</li><li>next官方文档</li><li>maupassant主题参考</li></ul>]]></content>
    
    <summary type="html">
    
      hexo搭建博客的自由度还是比较高的，特别是博客的主题非常多，有各种第三方的主题。通过主题的更换，可以让博客有不同的风格，并且切换的过程相对简单，方便。
    
    </summary>
    
      <category term="blog" scheme="https://wekerSnail.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://wekerSnail.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="https://wekerSnail.github.io/2018/09/03/set-blog/"/>
    <id>https://wekerSnail.github.io/2018/09/03/set-blog/</id>
    <published>2018-09-03T07:25:53.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<p>一直都想做一个自己的博客，一初是准备花一点段时间自己写一个博客站点的，仔细想想，自己完全从零开始是比较费时费力的。除了技术编码，还需要前期的UI设计和功能的考量，以及设计到一些后台数据的管理，都是比较繁琐的工作，另外考虑到自己写的很多地方也会考虑不全，写出的站点未必是稳定的，不够成熟。所以还是选择了使用现有的博客框架来做。(主要还是太懒)<br>由于 博客一初就是准备搭建在github page上的，所以自然就想到了hexo框架，下面就介绍一下整个hexo建站的流程，也是作为小白的我的一些经验总结吧。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>首先是在github帐号建仓，<img src="http://wx2.sinaimg.cn/large/99acde33gy1fuwk3q7tjsj20pd0liwfw.jpg" alt></li></ul><p>repository name填入gitName.github.io,例如<em>wekerSnail.github.io</em> <em>这边是为了待会访问能直接用这个地址访问，这是固定格式</em></p><ul><li>安装node  安装完成可以通过命令<code>npm -v //或者 node -v</code> 查看是否能输出版本号，输出则安装成功</li><li>安装git</li><li>通过npm 安装hexo cli <code>npm install hexo -g //全局安装</code></li></ul><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><p><em>前面已经把必要的工具基本准备完成，现在开始着手配置和搭建</em></p><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><ul><li><p>首先在本地创建一个文件夹，例如<code>mkdir blog</code></p><p>通过hexo 初始化该文件夹<code>hexo init</code></p><p>此时基本的hexo博客已经完成，只是都是默认设置，博客中有一篇hello world的实例文章</p><p>通过<code>hexo g</code>命令生产页面</p><p><code>hexo s</code> 打开本地的预览，命令运行完会默认提示localhost:4000地址打开查看</p></li><li><p>新建一片文章 <code>hexo n &#39;name&#39;</code>  hexo会在source目录生成一个md文件，通过编辑该文件来写博客文章</p></li></ul><h2 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h2><ul><li><p>打开_config.yml文件</p><p>找到deploy：</p><p>填上自己相关的配置</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">deploy<span class="token punctuation">:</span> type<span class="token punctuation">:</span> gitrepo<span class="token punctuation">:</span> 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 <span class="token punctuation">.</span>gitbranch<span class="token punctuation">:</span> master <span class="token comment" spellcheck="true">//注意hexo的配置项值的前面都有一个小空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置结束安装部署插件</p><pre class="line-numbers language-bash" mdui-tooltip="{content: 'bash'}"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成就可以开始部署了，输入以下三条命令</p><pre class="line-numbers language-bash" mdui-tooltip="{content: 'bash'}"><code class="language-bash">hexo clean //清除缓存hexo g //生成页面hexo d //部署页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结束就已经完成部署，此时可以浏览器打开 gitName.github.io来查看线上页面</p></li></ul><h1 id="查看文章"><a href="#查看文章" class="headerlink" title="查看文章"></a>查看文章</h1><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo参考</a> <code>hexo 的一些基本命令已经使用方式还是需要熟悉的，方便管理自己的文章</code></li><li><a href="https://www.jianshu.com/p/0130ad32a08d" target="_blank" rel="noopener">markdown语法</a> <code>//hexo是通过markdown语法来书写博客的，属于基本的markdown语法需要熟悉</code></li></ul>]]></content>
    
    <summary type="html">
    
      一直都想做一个自己的博客，一初是准备花一点段时间自己写一个博客站点的，仔细想想，自己完全从零开始是比较费时费力的。除了技术编码，还需要前期的UI设计和功能的考量，以及设计到一些后台数据的管理，都是比较繁琐的工作，另外考虑到自己写的很多地方也会考虑不全，写出的站点未必是稳定的，不够成熟。所以还是选择了使用现有的博客框架来做。(主要还是太懒)
    
    </summary>
    
      <category term="blog" scheme="https://wekerSnail.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://wekerSnail.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>前端实现图片上传的预览功能</title>
    <link href="https://wekerSnail.github.io/2018/08/08/upload-img/"/>
    <id>https://wekerSnail.github.io/2018/08/08/upload-img/</id>
    <published>2018-08-08T07:20:03.000Z</published>
    <updated>2019-04-10T08:34:01.339Z</updated>
    
    <content type="html"><![CDATA[<p><em>使用html5中的文件控件，多个图片的上传预览</em></p><p>图片的上传使用的是和文件上传一样的文件控件</p><pre class="line-numbers language-html" mdui-tooltip="{content: 'html'}"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>file<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是直接使用，会发现只可以选择一张图片，是因为file控件默认只接受一个参数，想要选择多个文件，需要使用multiple属性</p><blockquote><p>multiple 属性规定输入字段可选择多个值。<br>如果使用该属性，则字段可接受多个值。<br>例如：<br><code>`</code>html</p></blockquote><p><input type="file" multiple></p><pre><code>接下来开始进行多个图片的上传预览处理，首先使用的是file控件的files属性```jsvar files=document.querySelector(&#39;.file&#39;).files</code></pre><p>==此处如果使用jq的语法获取dom会导致获取不到files(jq获取的是jq对象，原生获取的是DOM对象，两者有区别)==</p><p>获取到的files数据是一个数组，所以我们的需要预览图片的话，需要遍历数组来取值</p><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> file<span class="token operator">=</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">//获取当前的file值</span>                <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token string">'&lt;img/>'</span>                reader<span class="token punctuation">.</span>onloadend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//readAsDataURL触发的loadend事件</span>                    img <span class="token operator">=</span> <span class="token string">'&lt;img class=imgs src='</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result <span class="token operator">+</span> <span class="token string">'>'</span>                    <span class="token function">$</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#img'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//新生成的图片添加到图片预览的dom中</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断是否还有值</span>                    reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取file文件</span>                <span class="token punctuation">}</span>        ｝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>FileReader</strong></p><blockquote><p>FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 File 或 Blob 对象指定要读取的文件或数据。</p></blockquote><blockquote><p>其中File对象可以是来自用户在一个<code>&lt;input&gt;</code>元素上选择文件后返回的FileList对象,也可以来自拖放操作生成的 DataTransfer对象,还可以是来自在一个HTMLCanvasElement上执行mozGetAsFile()方法后返回结果。</p></blockquote><p><strong>readAsDataURL</strong></p><blockquote><p>该方法会读取指定的 Blob 或 File 对象。读取操作完成的时候，readyState 会变成已完成（DONE），并触发 loadend 事件，同时 result 属性将包含一个data:URL格式的字符串（base64编码）以表示所读取文件的内容。</p></blockquote><pre class="line-numbers language-js" mdui-tooltip="{content: 'js'}"><code class="language-js">语法instanceOfFileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      使用html5中的文件控件，多个图片的上传预览
    
    </summary>
    
      <category term="js" scheme="https://wekerSnail.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://wekerSnail.github.io/tags/js/"/>
    
  </entry>
  
</feed>
